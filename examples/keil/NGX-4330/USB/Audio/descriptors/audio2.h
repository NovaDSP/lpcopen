
/***************************************************************************
   AUTOMATICALLY GENERATED by USBDescriptorKitchen (0.3)
   When editing, make sure you keep the indentation right
   and use an editor that doesn't mess around with the linefeeds.

   See http://github.com/zonque/USBDescriptorKitchen/
   for more information about the tool that was used to generate this file.
 ***************************************************************************/
static const char Device_1[] = {
  /* Device*/
  0x12,                       /* bLength (Size of this descriptor in bytes) */
  0x01,                       /* bDescriptorType (DEVICE Descriptor Type) */
  0x00, 0x02,                 /* bcdUSB (USB Specification Release Number in Binary-Coded Decimal) ("2.0") (512) */
  0x00,                       /* bDeviceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
  0x00,                       /* bDeviceSubClass (Subclass code (assigned by the USB-IF).) */
  0x00,                       /* bDeviceProtocol (Protocol code (assigned by the USB-IF).) */
  0x40,                       /* bMaxPacketSize0 (Maximum packet size for endpoint zero) ("64") */
  0x00, 0x00,                 /* idVendor (Vendor ID (assigned by the USB-IF)) (0) */
  0x00, 0x00,                 /* idProduct (Product ID (assigned by the manufacturer)) (0) */
  0x00, 0x00,                 /* bcdDevice (Device release number in binary-coded decimal) (0) */
  0x00,                       /* iManufacturer */
  0x00,                       /* iProduct */
  0x00,                       /* iSerialNumber */
  0x01,                       /* bNumConfigurations (Number of possible configurations) */
};

static const char Configuration_1[] = {
  /* Configuration*/
  0x09,                       /* bLength (Size of this descriptor in bytes) */
  0x02,                       /* bDescriptorType (CONFIGURATION Descriptor Type) */
  0x33, 0x00,                 /* wTotalLength (Total length of data returned for this configuration) (51) */
  0x02,                       /* bNumInterfaces (Number of interfaces supported by this configuration) */
  0x01,                       /* bConfigurationValue (Value to use as an argument to the SetConfiguration() request to select this configuration) */
  0x00,                       /* iConfiguration (Index of string descriptor describing this configuration) */
  0xc0,                       /* bmAttributes (Configuration characteristics) ('Remote Wakeup' = 0, 'Self-powered' = 1, 'Reserved (set to one)' = 1) */
  0x00,                       /* bMaxPower (Maximum power consumption of the USB, device. Expressed in 2 mA units) */
    /* Interface*/
    0x09,                     /* bLength (Size of this descriptor in bytes) */
    0x04,                     /* bDescriptorType (INTERFACE Descriptor Type) */
    0x00,                     /* bInterfaceNumber (Number of this interface. Zero-based value.) */
    0x00,                     /* bAlternateSetting (Value used to select this alternate setting) */
    0x00,                     /* bNumEndpoints (Number of endpoints used by this interface) */
    0x00,                     /* bInterfaceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
    0x00,                     /* bInterfaceSubClass (Subclass code (assigned by the USB-IF).) ("0") */
    0x00,                     /* bInterfaceProtocol (Protocol code (assigned by the USB).) */
    0x00,                     /* iInterface (Index of string descriptor describing this interface) */
    /* Interface*/
    0x09,                     /* bLength (Size of this descriptor in bytes) */
    0x04,                     /* bDescriptorType (INTERFACE Descriptor Type) */
    0x00,                     /* bInterfaceNumber (Number of this interface. Zero-based value.) */
    0x00,                     /* bAlternateSetting (Value used to select this alternate setting) */
    0x02,                     /* bNumEndpoints (Number of endpoints used by this interface) */
    0x00,                     /* bInterfaceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
    0x00,                     /* bInterfaceSubClass (Subclass code (assigned by the USB-IF).) ("0") */
    0x00,                     /* bInterfaceProtocol (Protocol code (assigned by the USB).) */
    0x00,                     /* iInterface (Index of string descriptor describing this interface) */
      /* Endpoint*/
      0x07,                   /* bLength (Size of this descriptor in bytes) */
      0x05,                   /* bDescriptorType (ENDPOINT descriptor) */
      0x81,                   /* bEndpointAddress ('Endpoint Number' = 1, 'Direction' = 1) */
      0x03,                   /* bEndpointAttributes ('Transfer Type' = 3, 'Synchronization Type' = 3, 'Usage Type' = 0) */
      0x00, 0x04,             /* wMaxPacketSize (Maximum packet size this endpoint is capable of sending or receiving when this configuration is selected.) (1024) */
      0x01,                   /* bInterval (Interval for polling endpoint for data transfers. Expressed in frames or microframes depending on the device operating speed (i.e., either 1 millisecond or 125 us units)) */
      /* Endpoint*/
      0x07,                   /* bLength (Size of this descriptor in bytes) */
      0x05,                   /* bDescriptorType (ENDPOINT descriptor) */
      0x02,                   /* bEndpointAddress ('Endpoint Number' = 2, 'Direction' = 0) */
      0x03,                   /* bEndpointAttributes ('Transfer Type' = 3, 'Synchronization Type' = 3, 'Usage Type' = 0) */
      0x00, 0x04,             /* wMaxPacketSize (Maximum packet size this endpoint is capable of sending or receiving when this configuration is selected.) (1024) */
      0x01,                   /* bInterval (Interval for polling endpoint for data transfers. Expressed in frames or microframes depending on the device operating speed (i.e., either 1 millisecond or 125 us units)) */
    /* DeviceQualifier*/
    0x0a,                     /* bLength (Size of this descriptor in bytes) */
    0x06,                     /* bDescriptorType (Device Qualifier Type) */
    0x00, 0x02,               /* bcdUSB (USB specification version number) ("2.0") (512) */
    0x01,                     /* bDeviceClass (Class Code) ("Audio") */
    0x02,                     /* bDeviceSubClass (Subclass Code) */
    0x01,                     /* bDeviceProtocol (Protocol Code) */
    0x40,                     /* bMaxPacketSize0 (Maximum packet size for other speed) ("64") */
    0x00,                     /* bNumConfigurations (Number of Other-speed Configurations) */
    0x00,                     /* bReserved (Reserved for future use, must be zero) */
};

static const char *Devices[] = {
	Device_1,
};

static const char *Configurations[] = {
	Configuration_1,
};


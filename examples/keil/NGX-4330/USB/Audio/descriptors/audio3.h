
/***************************************************************************
   AUTOMATICALLY GENERATED by USBDescriptorKitchen (0.3)
   When editing, make sure you keep the indentation right
   and use an editor that doesn't mess around with the linefeeds.

   See http://github.com/zonque/USBDescriptorKitchen/
   for more information about the tool that was used to generate this file.
 ***************************************************************************/
static const char Device_1[] = {
  /* Device*/
  0x12,                       /* bLength (Size of this descriptor in bytes) */
  0x01,                       /* bDescriptorType (DEVICE Descriptor Type) */
  0x00, 0x02,                 /* bcdUSB (USB Specification Release Number in Binary-Coded Decimal) ("2.0") (512) */
  0x00,                       /* bDeviceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
  0x00,                       /* bDeviceSubClass (Subclass code (assigned by the USB-IF).) */
  0x00,                       /* bDeviceProtocol (Protocol code (assigned by the USB-IF).) */
  0x40,                       /* bMaxPacketSize0 (Maximum packet size for endpoint zero) ("64") */
  0x00, 0x00,                 /* idVendor (Vendor ID (assigned by the USB-IF)) (0) */
  0x00, 0x00,                 /* idProduct (Product ID (assigned by the manufacturer)) (0) */
  0x00, 0x00,                 /* bcdDevice (Device release number in binary-coded decimal) (0) */
  0x00,                       /* iManufacturer */
  0x00,                       /* iProduct */
  0x00,                       /* iSerialNumber */
  0x01,                       /* bNumConfigurations (Number of possible configurations) */
};

static const char Configuration_1[] = {
  /* Configuration*/
  0x09,                       /* bLength (Size of this descriptor in bytes) */
  0x02,                       /* bDescriptorType (CONFIGURATION Descriptor Type) */
  0x5a, 0x00,                 /* wTotalLength (Total length of data returned for this configuration) (90) */
  0x02,                       /* bNumInterfaces (Number of interfaces supported by this configuration) */
  0x01,                       /* bConfigurationValue (Value to use as an argument to the SetConfiguration() request to select this configuration) */
  0x00,                       /* iConfiguration (Index of string descriptor describing this configuration) */
  0xc0,                       /* bmAttributes (Configuration characteristics) ('Remote Wakeup' = 0, 'Self-powered' = 1, 'Reserved (set to one)' = 1) */
  0x00,                       /* bMaxPower (Maximum power consumption of the USB, device. Expressed in 2 mA units) */
    /* Interface*/
    0x09,                     /* bLength (Size of this descriptor in bytes) */
    0x04,                     /* bDescriptorType (INTERFACE Descriptor Type) */
    0x00,                     /* bInterfaceNumber (Number of this interface. Zero-based value.) */
    0x00,                     /* bAlternateSetting (Value used to select this alternate setting) */
    0x00,                     /* bNumEndpoints (Number of endpoints used by this interface) */
    0x00,                     /* bInterfaceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
    0x00,                     /* bInterfaceSubClass (Subclass code (assigned by the USB-IF).) ("0") */
    0x00,                     /* bInterfaceProtocol (Protocol code (assigned by the USB).) */
    0x00,                     /* iInterface (Index of string descriptor describing this interface) */
    /* InterfaceAssociation*/
    0x08,                     /* bLength (Size of this descriptor in bytes) */
    0x08,                     /* bDescriptorType */
    0x00,                     /* bFirstInterface */
    0x00,                     /* bInterfaceCount */
    0x00,                     /* bFunctionClass ("Defined at interface level") */
    0x00,                     /* bInterfaceSubClass */
    0x00,                     /* bInterfaceProtocol */
    0x00,                     /* iFunction */
    /* Interface*/
    0x09,                     /* bLength (Size of this descriptor in bytes) */
    0x04,                     /* bDescriptorType (INTERFACE Descriptor Type) */
    0x00,                     /* bInterfaceNumber (Number of this interface. Zero-based value.) */
    0x00,                     /* bAlternateSetting (Value used to select this alternate setting) */
    0x02,                     /* bNumEndpoints (Number of endpoints used by this interface) */
    0x00,                     /* bInterfaceClass (Class code (assigned by the USB-IF).) ("Defined at interface level") */
    0x00,                     /* bInterfaceSubClass (Subclass code (assigned by the USB-IF).) ("0") */
    0x00,                     /* bInterfaceProtocol (Protocol code (assigned by the USB).) */
    0x00,                     /* iInterface (Index of string descriptor describing this interface) */
      /* UAC2InterfaceHeader*/
      0x0b,                   /* bLength (Size of this descriptor in bytes) */
      0x24,                   /* bDescriptorType */
      0x01,                   /* bDescriptorSubtype */
      0x00, 0x02,             /* bcdADC (512) */
      0x00,                   /* bCategory ("FUNCTION_SUBCLASS_UNDEFINED") */
      0x29,                   /* wTotalLength (Total number of bytes returned for the class-specific AudioControl interface descriptor.) */
      0x00, 0x00, 0x00, 0x00, /* bmControls ('Latency Control' = 0) (0) */
        /* UAC2ClockSource*/
        0x0b,                 /* bLength (Size of this descriptor in bytes) */
        0x24,                 /* bDescriptorType */
        0x0a,                 /* bDescriptorSubtype */
        0x00,                 /* bClockID */
        0x00,                 /* bmAttributes ('Clock type' = 0, 'Clock synchronized to SOF' = 0) */
        0x00, 0x00, 0x00, 0x00, /* bmControls ('Clock Frequency Control' = 0, 'Clock Validity Control' = 0) (0) */
        0x00,                 /* bAssocTerminal */
        0x00,                 /* iClockSource */
        /* UAC2InputTerminal*/
        0x13,                 /* bLength (Size of this descriptor in bytes) */
        0x24,                 /* bDescriptorType */
        0x02,                 /* bDescriptorSubtype */
        0x00,                 /* bTerminalID */
        0x00, 0x01,           /* wTerminalType ("USB Undefined") (256) */
        0x00,                 /* bAssocTerminal */
        0x00,                 /* bCSourceID */
        0x00,                 /* bNrChannels */
        0x00, 0x00, 0x00, 0x00, /* bmChannelConfig ('Top Front Center - TFC' = 0, 'Top Back Left - TBL' = 0, 'Side Right - SR' = 0, 'Low Frequency Effects- LFE' = 0, 'Back Left of Center - BLC' = 0, 'Front Left - FL' = 0, 'Top Front Left of Center - TFLC' = 0, 'Back Right of Center - BRC' = 0, 'Back Center - BC' = 0, 'Right Low Frequency Effects - RLFE' = 0, 'Raw Data - RD' = 0, 'Left Low Frequency Effects - LLFE' = 0, 'Front Center - FC' = 0, 'Back Right - BR' = 0, 'Top Front Right - TFR' = 0, 'Front Left of Center - FLC' = 0, 'Top Side Right - TSR' = 0, 'Top Back Center - TBC' = 0, 'Front Right - FR' = 0, 'Top Center - TC' = 0, 'Side Left - SL' = 0, 'Back Left - BL' = 0, 'Top Back Right - TBR' = 0, 'Top Front Right of Center - TFRC' = 0, 'Front Right of Center - FRC' = 0, 'Top Side Left - TSL' = 0, 'Top Front Left - TFL' = 0, 'Bottom Center - BC' = 0) (0) */
        0x00,                 /* iChannelNames */
        0x00, 0x00, 0x00, 0x00, /* bmControls ('Copy Protect Control' = 0, 'Connector Control' = 0, 'Overload Control' = 0, 'Cluster Control' = 0, 'Underflow Control' = 0, 'Overflow Control' = 0) (0) */
        0x00,                 /* iTerminal */
      /* Endpoint*/
      0x07,                   /* bLength (Size of this descriptor in bytes) */
      0x05,                   /* bDescriptorType (ENDPOINT descriptor) */
      0x01,                   /* bEndpointAddress ('Endpoint Number' = 1, 'Direction' = 0) */
      0x00,                   /* bEndpointAttributes ('Transfer Type' = 0, 'Synchronization Type' = 0, 'Usage Type' = 0) */
      0x00, 0x00,             /* wMaxPacketSize (Maximum packet size this endpoint is capable of sending or receiving when this configuration is selected.) (0) */
      0x00,                   /* bInterval (Interval for polling endpoint for data transfers. Expressed in frames or microframes depending on the device operating speed (i.e., either 1 millisecond or 125 us units)) */
      /* Endpoint*/
      0x07,                   /* bLength (Size of this descriptor in bytes) */
      0x05,                   /* bDescriptorType (ENDPOINT descriptor) */
      0x01,                   /* bEndpointAddress ('Endpoint Number' = 1, 'Direction' = 0) */
      0x00,                   /* bEndpointAttributes ('Transfer Type' = 0, 'Synchronization Type' = 0, 'Usage Type' = 0) */
      0x00, 0x00,             /* wMaxPacketSize (Maximum packet size this endpoint is capable of sending or receiving when this configuration is selected.) (0) */
      0x00,                   /* bInterval (Interval for polling endpoint for data transfers. Expressed in frames or microframes depending on the device operating speed (i.e., either 1 millisecond or 125 us units)) */
};

static const char *Devices[] = {
	Device_1,
};

static const char *Configurations[] = {
	Configuration_1,
};

